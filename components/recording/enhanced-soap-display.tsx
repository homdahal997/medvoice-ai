"use client";

import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { 
  FileText, 
  Download, 
  Copy, 
  Check, 
  User, 
  Stethoscope, 
  Brain, 
  Calendar,
  Share,
  Edit3
} from "lucide-react";
import { useState } from "react";

interface SoapNote {
  subjective: { text: string; sources: string[] };
  objective: { text: string; sources: string[] };
  assessment: { text: string; sources: string[] };
  plan: { text: string; sources: string[] };
}

interface EnhancedSoapDisplayProps {
  soapNote: SoapNote;
  transcription: string;
}

const soapSections = [
  {
    key: 'subjective' as keyof SoapNote,
    title: 'Subjective',
    description: 'Patient\'s description of symptoms and concerns',
    icon: User,
    color: 'blue',
    bgColor: 'bg-blue-50',
    borderColor: 'border-blue-200',
    textColor: 'text-blue-900'
  },
  {
    key: 'objective' as keyof SoapNote,
    title: 'Objective',
    description: 'Doctor\'s observations and examination findings',
    icon: Stethoscope,
    color: 'green',
    bgColor: 'bg-green-50',
    borderColor: 'border-green-200',
    textColor: 'text-green-900'
  },
  {
    key: 'assessment' as keyof SoapNote,
    title: 'Assessment',
    description: 'Doctor\'s diagnosis and clinical impression',
    icon: Brain,
    color: 'purple',
    bgColor: 'bg-purple-50',
    borderColor: 'border-purple-200',
    textColor: 'text-purple-900'
  },
  {
    key: 'plan' as keyof SoapNote,
    title: 'Plan',
    description: 'Treatment plan and follow-up instructions',
    icon: Calendar,
    color: 'orange',
    bgColor: 'bg-orange-50',
    borderColor: 'border-orange-200',
    textColor: 'text-orange-900'
  }
];

export function EnhancedSoapDisplay({ soapNote, transcription }: EnhancedSoapDisplayProps) {
  const [copiedSection, setCopiedSection] = useState<string | null>(null);
  const [copiedAll, setCopiedAll] = useState(false);

  const handleCopySection = async (sectionKey: string, content: string) => {
    try {
      await navigator.clipboard.writeText(content);
      setCopiedSection(sectionKey);
      setTimeout(() => setCopiedSection(null), 2000);
    } catch (err) {
      console.error('Failed to copy text: ', err);
    }
  };

  const handleCopyAll = async () => {
    const fullSoapNote = `
SOAP NOTE
Generated by MedVoice AI - ${new Date().toLocaleDateString()}

SUBJECTIVE:
${soapNote.subjective.text}

OBJECTIVE:
${soapNote.objective.text}

ASSESSMENT:
${soapNote.assessment.text}

PLAN:
${soapNote.plan.text}

---
Original Transcription:
${transcription}
    `.trim();

    try {
      await navigator.clipboard.writeText(fullSoapNote);
      setCopiedAll(true);
      setTimeout(() => setCopiedAll(false), 2000);
    } catch (err) {
      console.error('Failed to copy text: ', err);
    }
  };

  const handleDownloadPDF = () => {
    // This would integrate with a PDF generation library
    // For now, we'll create a simple text file
    const content = `
SOAP NOTE
Generated by MedVoice AI
Date: ${new Date().toLocaleDateString()}
Time: ${new Date().toLocaleTimeString()}

SUBJECTIVE:
${soapNote.subjective.text}

OBJECTIVE:
${soapNote.objective.text}

ASSESSMENT:
${soapNote.assessment.text}

PLAN:
${soapNote.plan.text}

---
ORIGINAL TRANSCRIPTION:
${transcription}

---
Generated by MedVoice AI - Medical Voice Assistant
    `.trim();

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `soap-note-${new Date().toISOString().slice(0, 19)}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="space-y-6">
      {/* Header with Actions */}
      <Card className="border-2 border-blue-200 bg-gradient-to-r from-blue-50 to-green-50">
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <div className="p-2 bg-blue-100 rounded-full">
                <FileText className="h-6 w-6 text-blue-600" />
              </div>
              <div>
                <h3 className="text-xl font-bold text-gray-900">SOAP Note</h3>
                <p className="text-sm text-gray-600">Generated on {new Date().toLocaleDateString()} at {new Date().toLocaleTimeString()}</p>
              </div>
            </div>
            
            <div className="flex items-center space-x-2">
              <Button
                onClick={handleCopyAll}
                variant="outline"
                size="sm"
                className="text-blue-600 border-blue-300 hover:bg-blue-50"
              >
                {copiedAll ? (
                  <Check className="h-4 w-4 mr-2" />
                ) : (
                  <Copy className="h-4 w-4 mr-2" />
                )}
                {copiedAll ? 'Copied!' : 'Copy All'}
              </Button>
              
              <Button
                onClick={handleDownloadPDF}
                variant="outline"
                size="sm"
                className="text-green-600 border-green-300 hover:bg-green-50"
              >
                <Download className="h-4 w-4 mr-2" />
                Download
              </Button>
              
              <Button
                variant="outline"
                size="sm"
                className="text-purple-600 border-purple-300 hover:bg-purple-50"
              >
                <Share className="h-4 w-4 mr-2" />
                Share
              </Button>
            </div>
          </CardTitle>
        </CardHeader>
      </Card>

      {/* SOAP Sections */}
      <div className="grid gap-6">
        {soapSections.map((section) => {
          const Icon = section.icon;
          const sectionData = soapNote[section.key];
          
          return (
            <Card key={section.key} className={`border-2 ${section.borderColor} hover:shadow-lg transition-shadow duration-300`}>
              <CardHeader className={`${section.bgColor} border-b ${section.borderColor}`}>
                <CardTitle className="flex items-center justify-between">
                  <div className="flex items-center space-x-3">
                    <div className={`p-2 bg-white rounded-full shadow-sm`}>
                      <Icon className={`h-5 w-5 text-${section.color}-600`} />
                    </div>
                    <div>
                      <h4 className={`text-lg font-bold ${section.textColor}`}>{section.title}</h4>
                      <p className="text-sm text-gray-600">{section.description}</p>
                    </div>
                  </div>
                  
                  <div className="flex items-center space-x-2">
                    <Button
                      onClick={() => handleCopySection(section.key, sectionData.text)}
                      variant="ghost"
                      size="sm"
                      className={`text-${section.color}-600 hover:bg-white`}
                    >
                      {copiedSection === section.key ? (
                        <Check className="h-4 w-4" />
                      ) : (
                        <Copy className="h-4 w-4" />
                      )}
                    </Button>
                    
                    <Button
                      variant="ghost"
                      size="sm"
                      className={`text-${section.color}-600 hover:bg-white`}
                    >
                      <Edit3 className="h-4 w-4" />
                    </Button>
                  </div>
                </CardTitle>
              </CardHeader>
              
              <CardContent className="p-6">
                <div className="space-y-4">
                  {/* Main Content */}
                  <div className="prose prose-gray max-w-none">
                    <p className="text-gray-800 leading-relaxed whitespace-pre-wrap">
                      {sectionData.text}
                    </p>
                  </div>
                  
                  {/* Sources */}
                  {sectionData.sources && sectionData.sources.length > 0 && (
                    <div className="border-t pt-4">
                      <h5 className="text-sm font-semibold text-gray-700 mb-2">Supporting Evidence:</h5>
                      <div className="space-y-2">
                        {sectionData.sources.map((source, index) => (
                          <div key={index} className="bg-gray-50 rounded-lg p-3 border-l-4 border-gray-300">
                            <p className="text-sm text-gray-700 italic">"{source}"</p>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>
          );
        })}
      </div>

      {/* Summary Stats */}
      <Card className="bg-gray-50 border border-gray-200">
        <CardContent className="p-6">
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-center">
            <div>
              <div className="text-2xl font-bold text-blue-600">{soapNote.subjective.text.split(' ').length}</div>
              <div className="text-sm text-gray-600">Subjective Words</div>
            </div>
            <div>
              <div className="text-2xl font-bold text-green-600">{soapNote.objective.text.split(' ').length}</div>
              <div className="text-sm text-gray-600">Objective Words</div>
            </div>
            <div>
              <div className="text-2xl font-bold text-purple-600">{soapNote.assessment.text.split(' ').length}</div>
              <div className="text-sm text-gray-600">Assessment Words</div>
            </div>
            <div>
              <div className="text-2xl font-bold text-orange-600">{soapNote.plan.text.split(' ').length}</div>
              <div className="text-sm text-gray-600">Plan Words</div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
